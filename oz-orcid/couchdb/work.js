{"_id":"_design/work","_rev":"12-0842d92d8bbb9c2e1edcb6d18c200ae3","lists":{"triples":"function(head,req) { var row; start({ 'headers': { 'Content-Type': 'text/plain' } }); while(row = getRow()) { send(row.value); } }","values":"function(head,req) { var row; start({ 'headers': { 'Content-Type': 'text/plain' } }); while(row = getRow()) { send(row.value + \"\\n\"); } }"},"views":{"nt":{"map":"/*\n\nShared code\n\n\n*/\n//----------------------------------------------------------------------------------------\n// http://stackoverflow.com/a/25715455\nfunction isObject(item) {\n  return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n//----------------------------------------------------------------------------------------\n// http://stackoverflow.com/a/21445415\nfunction uniques(arr) {\n  var a = [];\n  for (var i = 0, l = arr.length; i < l; i++)\n    if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n      a.push(arr[i]);\n  return a;\n}\n\n\n//----------------------------------------------------------------------------------------\n// Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n  var triple = [];\n  triple[0] = subject;\n  triple[1] = predicate;\n  triple[2] = object;\n\n  if (typeof language === 'undefined') {}\n  else {\n    triple[3] = language;\n  }\n\n  return triple;\n}\n\n//----------------------------------------------------------------------------------------\n// Enclose triple in suitable wrapping for HTML display or triplet output\nfunction wrap(s, html) {\n  if (s) {\n\n    if (s.match(/^(http|urn|_:)/)) {\n      s = s.replace(/\\\\_/g, '_');\n\n      // handle < > in URIs such as SICI-based DOIs\n      s = s.replace(/</g, '%3C');\n      s = s.replace(/>/g, '%3E');\n\n      if (html) {\n        s = '&lt;' + s + '&gt;';\n      }\n      else {\n        s = '<' + s + '>';\n      }\n    }\n    else {\n      if (s.match(/^\".*\"$/)) {\n        // already quoted, but maybe not escaped\n        s = s.replace(/^\"/, '');\n        s = s.replace(/\"$/g, '');\n      }\n      s = '\"' + s.replace(/\"/g, '\\\\\"') + '\"';\n    }\n  }\n  return s;\n}\n\n//----------------------------------------------------------------------------------------\n// https://css-tricks.com/snippets/javascript/htmlentities-for-javascript/\nfunction htmlEntities(str) {\n  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n\n//----------------------------------------------------------------------------------------\nfunction detect_language(s) {\n  var language = null;\n  var matched = 0;\n  var parts = [];\n\n  var regexp = [];\n\n  // https://gist.github.com/ryanmcgrath/982242\n  regexp['ja'] = /[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B/g;\n  // http://hjzhao.blogspot.co.uk/2015/09/javascript-detect-chinese-character.html\n  regexp['zh'] = /[\\u4E00-\\uFA29]/g;\n  // http://stackoverflow.com/questions/32709687/js-check-if-string-contains-only-cyrillic-symbols-and-spaces\n  regexp['ru'] = /[\\u0400-\\u04FF]/g;\n\n  for (var i in regexp) {\n    parts = s.match(regexp[i]);\n\n    if (parts != null) {\n      if (parts.length > matched) {\n        language = i;\n        matched = parts.length;\n      }\n    }\n  }\n\n  // require a minimum matching\n  if (matched < 2) {\n    language = null;\n  }\n\n  return language;\n\n}\n\n//----------------------------------------------------------------------------------------\nfunction output(doc, triples) {\n  // CouchDB\n  for (var i in triples) {\n    var s = 0;\n    var p = 1;\n    var o = 2;\n\n    var lang = 3;\n\n    var nquads = wrap(triples[i][s], false) +\n      ' ' + wrap(triples[i][p], false) +\n      ' ' + wrap(triples[i][o], false);\n    if (triples[i][lang]) {\n      nquads += '@' + triples[i][lang];\n    }\n\n    nquads += ' .' + \"\\n\";\n\n    // use cluster_id as the key so triples from different versions are linked together\n    emit(doc._id, nquads);\n    //console.log(nquads);\n  }\n}\n\n//----------------------------------------------------------------------------------------\n// START COUCHDB VIEW\nfunction message(doc) {\n  if (doc.message.DOI) {\n\n    var doi = doc.message.DOI.toLowerCase();\n\n    // clean up badness\n    // e.g. 0000-0002-4662-0227/work/29262377\n    doi = doi.replace(/(https?:\\/\\/)?(dx\\.)?doi.org\\/\\s*/, '');\n    doi = doi.replace(/doi\\s*:?\\s*/i, '');\n    doi = doi.replace(/info:doi\\//, '');\n    doi = doi.replace(/doi.org\\//, '');\n    doi = doi.replace(/\\[pii\\]/, '');\n    doi = doi.replace(/\\s+$/, '');\n    doi = doi.replace(/^\\s+/, '');\n    doi = doi.replace(/\\s/g, '');\n\n\n\n    // use ORCID work id\n    var subject_id = 'https://orcid.org/' + doc._id;\n\n    // use DOI\n    if (1) {\n      subject_id = 'https://doi.org/' + doi;\n    }\n\n    for (var i in doc.message.author) {\n      if (doc.message.author[i].ORCID) {\n        // ignore cases where author is actually all the authors\n        var go = true;\n        if (doc.message.author[i].literal.match(/ and /)) {\n          go = false;\n        }\n        // et al.\n        if (doc.message.author[i].literal.match(/ et al/)) {\n          go = false;\n        }\n\n        if (go) {\n\n          // we want simple triples linking name to position in author list\n          var triples = [];\n          var type = '';\n\n          // type of work\n          if (doc.message.type) {\n            switch (doc.message.type) {\n              case 'article-journal':\n              case 'journal-article':\n                type = 'http://schema.org/ScholarlyArticle';\n                break;\n              default:\n                break;\n            }\n          }\n\n          if (doc.message.title) {\n            triples.push(triple(\n              subject_id,\n              'http://schema.org/name',\n              doc.message.title));\n          }\n\n          // identifier \n          /*\n          triples.push(triple(subject_id,\n            'http://schema.org/identifier',\n            '\"https://doi.org/' + doi + '\"'));\n\t\t  */\n\n          var identifier_id = subject_id + '#doi';\n\n          triples.push(triple(\n              subject_id,\n              'http://schema.org/identifier',\n              identifier_id));\n\n          triples.push(triple(\n              identifier_id,\n              'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n              'http://schema.org/PropertyValue'));\n\n          triples.push(triple(\n              identifier_id,\n              'http://schema.org/propertyID',\n              'doi'));\n\n          triples.push(triple(\n              identifier_id,\n              'http://schema.org/value',\n              doi\n          ));\n\n          var index = parseInt(i) + 1;\n          var role_id = subject_id + '#role-' + index;\n          \n            var person_mode = 'local'; // person is always a bnode, with ORCID as sameAs\n            //var person_mode = 'global'; // use ORCIDs as person identifiers when we have them\n\n            var sameAs = [];\n          \n\n          var creator_id = '';\n          \n          if (person_mode == 'global') {\n            creator_id = 'https://orcid.org/' + doc.message.author[i].ORCID;\n          }\n          else {\n            creator_id = subject_id + '#creator-' + index;\n            \n            sameAs.push('https://orcid.org/' + doc.message.author[i].ORCID);\n          }\n\n          triples.push(triple(\n            subject_id,\n            'http://schema.org/creator',\n            role_id));\n\n          triples.push(triple(\n            role_id,\n            'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n            'http://schema.org/Role'));\n\n          triples.push(triple(\n            role_id,\n            'http://schema.org/roleName',\n            String(index)\n          ));\n\n          triples.push(triple(\n            role_id,\n            'http://schema.org/creator',\n            creator_id\n          ));\n\n          // type, need to handle organisations as authors\n          triples.push(triple(\n            creator_id,\n            'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n            'http://schema.org/Person'));\n\n          if (person_mode == 'global') {\n            // store name as alias, ORCID will have definitive name\n            triples.push(triple(\n              creator_id,\n              'http://schema.org/alternateName',\n              doc.message.author[i].literal));\n          }\n          else {\n            // store name as name\n            triples.push(triple(\n              creator_id,\n              'http://schema.org/name',\n              doc.message.author[i].literal));\n          }\n          \n            // identifier(s)\n            for (var k in sameAs) {\n              triples.push(triple(creator_id,\n                'http://schema.org/sameAs',\n                '\"' + sameAs[k] + '\"'));\n            }\n          \n\n          /*\n          var identifier_id = '';\n          if (use_orcid) {\n             identifier_id = creator_id + '#orcid';\n          } else {\n            identifier_id = creator_id + '-orcid';\n          }\n\n          triples.push(triple(\n              creator_id,\n              'http://schema.org/identifier',\n              identifier_id));\n\n          triples.push(triple(\n              identifier_id,\n              'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n              'http://schema.org/PropertyValue'));\n\n          triples.push(triple(\n              identifier_id,\n              'http://schema.org/propertyID',\n              'orcid'));\n\n          triples.push(triple(\n              identifier_id,\n              'http://schema.org/value',\n              doc.message.author[i].ORCID\n          ));\n          */\n\n          if (type == '') {\n            type = 'http://schema.org/CreativeWork';\n          }\n\n\n          // defaults\n          triples.push(triple(subject_id,\n            'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n            type));\n\n\n\n          output(doc, triples);\n\n        }\n      }\n    }\n  }\n}\n\n\nfunction(doc) {\n  if (doc['message-format'] == 'application/vnd.citationstyles.csl+json') {\n    message(doc);\n  }\n}\n// END COUCHDB VIEW"},"orcid-works":{"map":"function (doc) {\n  if (doc['message-format'] == 'application/vnd.citationstyles.csl+json') {\n     emit(doc._id, doc);\n  }\n}"}},"language":"javascript"}
